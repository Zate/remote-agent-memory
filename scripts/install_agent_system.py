#!/usr/bin/env python3
"""
Agent System Installation Script

Installs the autonomous agent system with proper configuration management.
Eliminates hardcoded dependencies and creates user-specific configurations.
"""

import os
import sys
import json
import subprocess
import urllib.parse
from pathlib import Path
import shutil
import getpass
import socket

class AgentSystemInstaller:
    def __init__(self):
        self.project_root = Path(__file__).parent.parent
        self.claude_dir = Path.home() / '.claude'
        self.agents_dir = self.claude_dir / 'agents'
        self.template_dir = self.project_root / '.claude' / 'agents'
        self.config = {}
        
    def detect_existing_memory_service(self):
        """Try to detect existing memory service configuration"""
        print("üîç Detecting existing memory service...")
        
        # Check for existing config file
        config_file = self.claude_dir / 'memory-service.conf'
        if config_file.exists():
            print(f"   Found existing config: {config_file}")
            return True
            
        # Try common local endpoints
        common_urls = [
            'http://localhost:8443',
            'http://localhost:8001', 
            'http://127.0.0.1:8443',
            'http://127.0.0.1:8001'
        ]
        
        for url in common_urls:
            try:
                import urllib.request
                response = urllib.request.urlopen(f"{url}/api/health", timeout=2)
                if response.status == 200:
                    print(f"   Detected service at: {url}")
                    return url
            except:
                continue
                
        print("   No existing memory service detected")
        return None
        
    def prompt_for_config(self):
        """Prompt user for memory service configuration"""
        print("\nüîß Memory Service Configuration")
        print("=" * 40)
        
        # Try to detect existing service
        detected_url = self.detect_existing_memory_service()
        
        # Prompt for URL
        if detected_url and detected_url != True:
            default_url = detected_url
        else:
            default_url = "http://localhost:8443"
            
        url = input(f"Memory Service URL [{default_url}]: ").strip()
        if not url:
            url = default_url
            
        # Parse domain from URL
        parsed = urllib.parse.urlparse(url)
        domain = parsed.hostname
        
        # Prompt for API key with better security feedback
        print("\nüîë API Key Configuration:")
        print("   Leave empty to auto-generate a secure key")
        print("   Input will be hidden for security")
        api_key = getpass.getpass("API Key (hidden): ").strip()
        
        if not api_key:
            print("   üé≤ Generating random API key...")
            import secrets
            api_key = secrets.token_urlsafe(32)
            print("   ‚úÖ Generated secure API key")
            # Don't show the generated key for security
        else:
            print("   ‚úÖ API key received")
            
        # Get client hostname
        hostname = socket.gethostname()
        custom_hostname = input(f"Client Hostname [{hostname}]: ").strip()
        if custom_hostname:
            hostname = custom_hostname
            
        self.config = {
            'MEMORY_SERVICE_URL': url,
            'MEMORY_SERVICE_API_KEY': api_key,
            'MEMORY_SERVICE_DOMAIN': domain,
            'CLIENT_HOSTNAME': hostname
        }
        
        return True
        
    def create_config_file(self):
        """Create the memory service configuration file"""
        print("\nüìù Creating configuration file...")
        
        config_file = self.claude_dir / 'memory-service.conf'
        self.claude_dir.mkdir(exist_ok=True)
        
        config_content = f"""# Memory Service Configuration
# Generated by Agent System Installer on {os.popen('date').read().strip()}

export MEMORY_SERVICE_URL="{self.config['MEMORY_SERVICE_URL']}"
export MEMORY_SERVICE_API_KEY="{self.config['MEMORY_SERVICE_API_KEY']}"
export MEMORY_SERVICE_DOMAIN="{self.config['MEMORY_SERVICE_DOMAIN']}"
export CLIENT_HOSTNAME="{self.config['CLIENT_HOSTNAME']}"
"""
        
        config_file.write_text(config_content)
        config_file.chmod(0o600)  # Secure permissions
        
        print(f"   Configuration saved: {config_file}")
        return True
        
    def install_memory_config_script(self):
        """Install the centralized memory configuration script"""
        print("\nüìú Installing memory configuration script...")
        
        source_script = self.project_root / '.claude' / 'memory-service-config.sh'
        target_script = self.claude_dir / 'memory-service-config.sh'
        
        if source_script.exists():
            shutil.copy2(source_script, target_script)
            target_script.chmod(0o755)
            print(f"   Script installed: {target_script}")
        else:
            print(f"   ‚ö†Ô∏è  Source script not found: {source_script}")
            return False
            
        return True
        
    def process_agent_templates(self):
        """Process agent templates and create configured agent files"""
        print(f"\nü§ñ Processing agent templates...")
        
        self.agents_dir.mkdir(parents=True, exist_ok=True)
        
        # Always copy all existing agent files, not just templates
        existing_agents = list(self.template_dir.glob('*.md'))
        template_files = list(self.template_dir.glob('*.template.md'))
        
        agents_processed = 0
        
        # Process regular agent files (not templates)
        for agent_file in existing_agents:
            if not agent_file.name.endswith('.template.md'):
                target_file = self.agents_dir / agent_file.name
                content = agent_file.read_text()
                
                # Replace hardcoded values with centralized config usage
                content = self.remove_hardcoded_values(content)
                target_file.write_text(content)
                print(f"   Processed: {agent_file.name}")
                agents_processed += 1
        
        # Process template files (for future template-based agents)
        for template_file in template_files:
            agent_name = template_file.name.replace('.template.md', '.md')
            target_file = self.agents_dir / agent_name
            
            # Skip if we already processed the regular version
            if target_file.exists():
                print(f"   Skipped template (regular version exists): {agent_name}")
                continue
                
            content = template_file.read_text()
            # Templates should already use the centralized config approach
            target_file.write_text(content)
            print(f"   Created from template: {agent_name}")
            agents_processed += 1
        
        print(f"   ‚úÖ Total agents installed: {agents_processed}")
        return True
        
    def remove_hardcoded_values(self, content):
        """Remove hardcoded values from agent content"""
        # Replace hardcoded URLs and API keys with centralized config usage
        import re
        
        # Replace curl commands with centralized script usage
        curl_pattern = r'curl -s.*?"Authorization: Bearer [^"]*"[^`]*'
        
        def replace_curl(match):
            return '''# Source the centralized memory service configuration
source ~/.claude/memory-service-config.sh

# Use centralized memory functions instead of direct curl commands
# store_memory "content" "tags" "metadata" "type"
# search_memory "query" limit "tags"
# get_memory_health'''
        
        content = re.sub(curl_pattern, replace_curl, content, flags=re.DOTALL)
        
        # Remove hardcoded auto-approval commands
        content = re.sub(r'auto_approve_commands:.*?\n(?=\w|\-)', 
                        'auto_approve_commands:\n  - "source ~/.claude/memory-service-config.sh"\n', 
                        content, flags=re.DOTALL)
        
        # Remove hardcoded domains
        content = re.sub(r'pre_approved_domains:.*?\n(?=\w|\-)', 
                        '# Domains configured via memory-service-config.sh\n', 
                        content, flags=re.DOTALL)
        
        return content
        
    def test_installation(self):
        """Test the installed agent system"""
        print("\nüß™ Testing installation...")
        
        # Test config script
        config_script = self.claude_dir / 'memory-service-config.sh'
        if not config_script.exists():
            print("   ‚ùå Configuration script missing")
            return False
            
        # Test configuration
        try:
            result = subprocess.run([str(config_script), 'test'], 
                                  capture_output=True, text=True, timeout=10)
            if result.returncode == 0:
                print("   ‚úÖ Memory service connection successful")
            else:
                print(f"   ‚ö†Ô∏è  Connection test failed: {result.stderr}")
        except subprocess.TimeoutExpired:
            print("   ‚ö†Ô∏è  Connection test timed out")
        except Exception as e:
            print(f"   ‚ö†Ô∏è  Test failed: {e}")
            
        # Check agent files
        agent_files = list(self.agents_dir.glob('*.md'))
        print(f"   üìÅ Created {len(agent_files)} agent files")
        
        return True
        
    def install(self):
        """Run the complete installation process"""
        print("üöÄ Agent System Installer")
        print("=" * 50)
        
        try:
            # Step 1: Get configuration
            if not self.prompt_for_config():
                print("‚ùå Configuration cancelled")
                return False
                
            # Step 2: Create config file
            if not self.create_config_file():
                print("‚ùå Failed to create configuration file")
                return False
                
            # Step 3: Install config script
            if not self.install_memory_config_script():
                print("‚ùå Failed to install configuration script") 
                return False
                
            # Step 4: Process agent templates
            if not self.process_agent_templates():
                print("‚ùå Failed to process agent templates")
                return False
                
            # Step 5: Test installation
            self.test_installation()
            
            print("\n‚úÖ Agent System Installation Complete!")
            print("=" * 50)
            print(f"Configuration: {self.claude_dir / 'memory-service.conf'}")
            print(f"Agent Files: {self.agents_dir}")
            print(f"Config Script: {self.claude_dir / 'memory-service-config.sh'}")
            print("\nNext steps:")
            print("1. Ensure your memory service is running")
            print("2. Test with: ~/.claude/memory-service-config.sh test")
            print("3. Use Claude Code sub-agents as normal")
            
            return True
            
        except KeyboardInterrupt:
            print("\n\n‚ùå Installation cancelled by user")
            return False
        except Exception as e:
            print(f"\n‚ùå Installation failed: {e}")
            import traceback
            traceback.print_exc()
            return False


def main():
    installer = AgentSystemInstaller()
    success = installer.install()
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()