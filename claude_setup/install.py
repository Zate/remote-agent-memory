#!/usr/bin/env python3
"""
Claude Setup Universal Installer

Installs the complete Claude Code integration system including:
- Autonomous sub-agents with enhanced descriptions  
- Session hooks for memory awareness
- Enhanced commands that delegate to sub-agents
- Centralized configuration management

All components work together with no hardcoded dependencies.
"""

import os
import sys
import json
import subprocess
import urllib.parse
from pathlib import Path
import shutil
import getpass
import socket

class ClaudeSetupInstaller:
    def __init__(self):
        self.setup_root = Path(__file__).parent
        self.claude_dir = Path.home() / '.claude'
        self.agents_dir = self.claude_dir / 'agents'
        self.commands_dir = self.claude_dir / 'commands' 
        self.hooks_dir = self.claude_dir / 'hooks'
        
        # Source directories
        self.source_agents = self.setup_root / 'agents'
        self.source_commands = self.setup_root / 'commands'
        self.source_hooks = self.setup_root / 'hooks'
        
        self.config = {}
        
    def detect_existing_memory_service(self):
        """Try to detect existing memory service configuration"""
        print("üîç Detecting existing memory service...")
        
        # Check for existing config file
        config_file = self.claude_dir / 'memory-service.conf'
        if config_file.exists():
            print(f"   Found existing config: {config_file}")
            return True
            
        # Try common local endpoints
        common_urls = [
            'http://localhost:8443',
            'http://localhost:8001', 
            'http://127.0.0.1:8443',
            'http://127.0.0.1:8001'
        ]
        
        for url in common_urls:
            try:
                import urllib.request
                response = urllib.request.urlopen(f"{url}/api/health", timeout=2)
                if response.status == 200:
                    print(f"   Detected service at: {url}")
                    return url
            except:
                continue
                
        print("   No existing memory service detected")
        return None
        
    def prompt_for_config(self):
        """Prompt user for memory service configuration"""
        print("\\nüîß Memory Service Configuration")
        print("=" * 40)
        
        # Try to detect existing service
        detected_url = self.detect_existing_memory_service()
        
        # Prompt for URL
        if detected_url and detected_url != True:
            default_url = detected_url
        else:
            default_url = "http://localhost:8443"
            
        url = input(f"Memory Service URL [{default_url}]: ").strip()
        if not url:
            url = default_url
            
        # Parse domain from URL
        parsed = urllib.parse.urlparse(url)
        domain = parsed.hostname
        
        # Prompt for API key with better security feedback
        print("\\nüîë API Key Configuration:")
        print("   Leave empty to auto-generate a secure key")
        print("   Input will be hidden for security")
        api_key = getpass.getpass("API Key (hidden): ").strip()
        
        if not api_key:
            print("   üé≤ Generating random API key...")
            import secrets
            api_key = secrets.token_urlsafe(32)
            print("   ‚úÖ Generated secure API key")
        else:
            print("   ‚úÖ API key received")
            
        # Get client hostname
        hostname = socket.gethostname()
        custom_hostname = input(f"Client Hostname [{hostname}]: ").strip()
        if custom_hostname:
            hostname = custom_hostname
            
        self.config = {
            'MEMORY_SERVICE_URL': url,
            'MEMORY_SERVICE_API_KEY': api_key,
            'MEMORY_SERVICE_DOMAIN': domain,
            'CLIENT_HOSTNAME': hostname
        }
        
        return True
        
    def create_config_file(self):
        """Create the memory service configuration file"""
        print("\\nüìù Creating configuration file...")
        
        config_file = self.claude_dir / 'memory-service.conf'
        self.claude_dir.mkdir(exist_ok=True)
        
        config_content = f"""# Memory Service Configuration
# Generated by Claude Setup Installer on {os.popen('date').read().strip()}

export MEMORY_SERVICE_URL="{self.config['MEMORY_SERVICE_URL']}"
export MEMORY_SERVICE_API_KEY="{self.config['MEMORY_SERVICE_API_KEY']}"
export MEMORY_SERVICE_DOMAIN="{self.config['MEMORY_SERVICE_DOMAIN']}"
export CLIENT_HOSTNAME="{self.config['CLIENT_HOSTNAME']}"
"""
        
        config_file.write_text(config_content)
        config_file.chmod(0o600)  # Secure permissions
        
        print(f"   Configuration saved: {config_file}")
        return True
        
    def install_memory_config_script(self):
        """Install the centralized memory configuration script"""
        print("\\nüìú Installing memory configuration script...")
        
        source_script = self.setup_root.parent / '.claude' / 'memory-service-config.sh'
        target_script = self.claude_dir / 'memory-service-config.sh'
        
        if source_script.exists():
            shutil.copy2(source_script, target_script)
            target_script.chmod(0o755)
            print(f"   Script installed: {target_script}")
        else:
            print(f"   ‚ö†Ô∏è  Source script not found: {source_script}")
            return False
            
        return True
        
    def substitute_template_variables(self, content):
        """Replace template variables with actual config values"""
        replacements = {
            '{{MEMORY_SERVICE_URL}}': self.config['MEMORY_SERVICE_URL'],
            '{{MEMORY_SERVICE_API_KEY}}': self.config['MEMORY_SERVICE_API_KEY'],
            '{{MEMORY_SERVICE_DOMAIN}}': self.config['MEMORY_SERVICE_DOMAIN'],
            '{{CLIENT_HOSTNAME}}': self.config['CLIENT_HOSTNAME']
        }
        
        for placeholder, value in replacements.items():
            content = content.replace(placeholder, value)
            
        return content
        
    def remove_hardcoded_values(self, content):
        """Remove hardcoded values from content"""
        import re
        
        # Replace curl commands with centralized script usage
        curl_pattern = r'curl -s.*?"Authorization: Bearer [^"]*"[^`]*'
        
        def replace_curl(match):
            return '''# Source the centralized memory service configuration
source ~/.claude/memory-service-config.sh

# Use centralized memory functions instead of direct curl commands
# store_memory "content" "tags" "metadata" "type"
# search_memory "query" limit "tags"
# get_memory_health'''
        
        content = re.sub(curl_pattern, replace_curl, content, flags=re.DOTALL)
        
        # Remove hardcoded auto-approval commands
        content = re.sub(r'auto_approve_commands:.*?\\n(?=\\w|\\-)', 
                        'auto_approve_commands:\\n  - "source ~/.claude/memory-service-config.sh"\\n', 
                        content, flags=re.DOTALL)
        
        # Remove hardcoded domains
        content = re.sub(r'pre_approved_domains:.*?\\n(?=\\w|\\-)', 
                        '# Domains configured via memory-service-config.sh\\n', 
                        content, flags=re.DOTALL)
        
        return content
        
    def install_agents(self):
        """Install autonomous sub-agents"""
        print("\\nü§ñ Installing autonomous sub-agents...")
        
        self.agents_dir.mkdir(parents=True, exist_ok=True)
        
        # Process all agent files
        agent_files = list(self.source_agents.glob('*.md'))
        template_files = list(self.source_agents.glob('*.template.md'))
        
        agents_processed = 0
        
        # Process regular agent files (enhanced versions)
        for agent_file in agent_files:
            if not agent_file.name.endswith('.template.md'):
                target_file = self.agents_dir / agent_file.name
                content = agent_file.read_text()
                
                # Clean up hardcoded values
                content = self.remove_hardcoded_values(content)
                target_file.write_text(content)
                print(f"   Installed agent: {agent_file.name}")
                agents_processed += 1
        
        # Process templates only if no regular version exists
        for template_file in template_files:
            agent_name = template_file.name.replace('.template.md', '.md')
            target_file = self.agents_dir / agent_name
            
            if target_file.exists():
                print(f"   Skipped template (enhanced version exists): {agent_name}")
                continue
                
            content = template_file.read_text()
            content = self.substitute_template_variables(content)
            target_file.write_text(content)
            print(f"   Installed from template: {agent_name}")
            agents_processed += 1
        
        print(f"   ‚úÖ Total agents installed: {agents_processed}")
        return True
        
    def install_commands(self):
        """Install Claude Code commands"""
        print("\\n‚å®Ô∏è  Installing Claude Code commands...")
        
        self.commands_dir.mkdir(parents=True, exist_ok=True)
        
        command_files = list(self.source_commands.glob('*.md'))
        commands_processed = 0
        
        for command_file in command_files:
            target_file = self.commands_dir / command_file.name
            content = command_file.read_text()
            
            # Commands should already be sub-agent integrated
            target_file.write_text(content)
            print(f"   Installed command: {command_file.name}")
            commands_processed += 1
            
        print(f"   ‚úÖ Total commands installed: {commands_processed}")
        return True
        
    def install_hooks(self):
        """Install Claude Code hooks system"""
        print("\\nü™ù Installing Claude Code hooks...")
        
        self.hooks_dir.mkdir(parents=True, exist_ok=True)
        
        # Copy hooks system
        if self.source_hooks.exists():
            # Copy hooks files
            for item in self.source_hooks.iterdir():
                if item.is_file():
                    if item.name.endswith('.template.json'):
                        # Handle template config
                        target_file = self.hooks_dir / item.name.replace('.template.json', '.json')
                        content = item.read_text()
                        content = self.substitute_template_variables(content)
                        target_file.write_text(content)
                        print(f"   Configured: {target_file.name}")
                    else:
                        # Copy regular files
                        shutil.copy2(item, self.hooks_dir / item.name)
                        print(f"   Installed: {item.name}")
                elif item.is_dir():
                    # Copy directories recursively
                    target_dir = self.hooks_dir / item.name
                    shutil.copytree(item, target_dir, dirs_exist_ok=True)
                    print(f"   Installed directory: {item.name}/")
                    
            print("   ‚úÖ Hooks system installed")
            return True
        else:
            print(f"   ‚ö†Ô∏è  Hooks source not found: {self.source_hooks}")
            return False
            
    def test_installation(self):
        """Test the installed system"""
        print("\\nüß™ Testing installation...")
        
        # Test config script
        config_script = self.claude_dir / 'memory-service-config.sh'
        if not config_script.exists():
            print("   ‚ùå Configuration script missing")
            return False
            
        # Test configuration
        try:
            result = subprocess.run([str(config_script), 'test'], 
                                  capture_output=True, text=True, timeout=10)
            if result.returncode == 0:
                print("   ‚úÖ Memory service connection successful")
            else:
                print(f"   ‚ö†Ô∏è  Connection test failed: {result.stderr}")
        except subprocess.TimeoutExpired:
            print("   ‚ö†Ô∏è  Connection test timed out")
        except Exception as e:
            print(f"   ‚ö†Ô∏è  Test failed: {e}")
            
        # Check installed components
        agent_files = list(self.agents_dir.glob('*.md'))
        command_files = list(self.commands_dir.glob('*.md'))
        hooks_installed = self.hooks_dir.exists()
        
        print(f"   üìÅ Agents: {len(agent_files)} installed")
        print(f"   ‚å®Ô∏è  Commands: {len(command_files)} installed") 
        print(f"   ü™ù Hooks: {'‚úÖ' if hooks_installed else '‚ùå'}")
        
        return True
        
    def install(self):
        """Run the complete installation process"""
        print("üöÄ Claude Setup Universal Installer")
        print("=" * 50)
        print("Installing: Sub-Agents + Commands + Hooks + Config")
        
        try:
            # Step 1: Get configuration
            if not self.prompt_for_config():
                print("‚ùå Configuration cancelled")
                return False
                
            # Step 2: Create config file
            if not self.create_config_file():
                print("‚ùå Failed to create configuration file")
                return False
                
            # Step 3: Install config script
            if not self.install_memory_config_script():
                print("‚ùå Failed to install configuration script") 
                return False
                
            # Step 4: Install agents
            if not self.install_agents():
                print("‚ùå Failed to install agents")
                return False
                
            # Step 5: Install commands
            if not self.install_commands():
                print("‚ùå Failed to install commands")
                return False
                
            # Step 6: Install hooks
            if not self.install_hooks():
                print("‚ùå Failed to install hooks")
                return False
                
            # Step 7: Test installation
            self.test_installation()
            
            print("\\n‚úÖ Claude Setup Installation Complete!")
            print("=" * 50)
            print(f"Configuration: {self.claude_dir / 'memory-service.conf'}")
            print(f"Agents: {self.agents_dir} ({len(list(self.agents_dir.glob('*.md')))} installed)")
            print(f"Commands: {self.commands_dir} ({len(list(self.commands_dir.glob('*.md')))} installed)")
            print(f"Hooks: {self.hooks_dir}")
            print(f"Config Script: {self.claude_dir / 'memory-service-config.sh'}")
            print("\\nNext steps:")
            print("1. Ensure your memory service is running")
            print("2. Test with: ~/.claude/memory-service-config.sh test")
            print("3. Use Claude Code with enhanced sub-agents!")
            print("4. Commands like /memory-store now use intelligent sub-agents")
            print("5. Hooks automatically inject/store session context")
            
            return True
            
        except KeyboardInterrupt:
            print("\\n\\n‚ùå Installation cancelled by user")
            return False
        except Exception as e:
            print(f"\\n‚ùå Installation failed: {e}")
            import traceback
            traceback.print_exc()
            return False


def main():
    installer = ClaudeSetupInstaller()
    success = installer.install()
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()